The purpose of this software is to detect faces on a database given by the user -database of .avi videos-. The software will create a "Database" directory filled with .jpg images of the detected faces.
Then, with some pictures of a person’s face, the software tells if and where that person is appearing on the videos by saving the detected face with the name of the video it was detected

The ultimate goal is to help police find previously identified criminals on surveillance videos.



Installation : chmod+x install.sh ; ./install.sh
Generate Database : chmod +x generate_database.sh; ./generate_database.sh /path/to/database/ [demo_mode]


-> /path/to/database is either an absolute or relative (from the current directory) path to the directory containing all the videos.

-> demo_mode is an option to decide whether you want to see in live and save in the Database directory a video showing you the database generation or not. If the demo mode is set, the generation will be slower but you will see in a window what the algorithm is doing. If the value is not set or set to 0, the database will be generated without video. If the value is set to any other number, the demo mode is activated.


The .jpg files are now saved with this structure:

Main_Directory/Database/video_name/LabelXFrameYFaceZ[|Profile|].jpg

-Database: main directory of the files.
-video_name: the name of the video where the current face was seen.
-X: The label of the face. The face detection algorithm follows the faces. If a person appears walking on several successive frames, the algorithm will know that each picture of the person’s face corresponds to the same person and will save the images representing the same face on different frames with the same label.
-Y: the frame number
-Z: The current picture is the Z-th detected face of the Y-th frame.
-|Profile|: appears if and only if the detected face is in profile.


Note that the automatic labeling procedure:
*is not 100% accurate
*will not remember a person. If a person disappears from the screen and appears again later on the same video or on an other one, the algorithm will consider the face with a new label.

Consequently, the labels may have to be reviewed.

A .txt file is also provided. It is saved in:

Main_Directory/Caffe_Files/full_database.txt

Each line represent a specific .jpg image of of this file has the following structure:

Main_Directory/Database/videoM/LabelX[|Profile|]FrameYFaceZ.jpg B

B is automatically computed from M and X so that the label appearing in the file can be used directly by caffe.

FOR SIAMESE NETWORK ONLY:
—————————————————————————

Supposing that the automatic labeling was not efficient enough for your particular case -typically if some main faces appeared on several videos-, you may have to manually change the labels of the concerned images.

Let’s assume you have to modify few labels to face this kind of issues. If you manually changed the name of some images so that the label of each file is the first  character of the file name (ie for example 1Frame2.jpg has label 1 and 4Frame23.jpg has label 4), then, the next commands will generate a new database file called labelised_full_database.txt in the directory Caffe_File with the required labels. Note that it works only with labels between 1 to 9. With a minor modification, more labels can be modified. Other few pictures with labels 1 to 9 can be manually modified directly in the file if needed.

First, let’s regenerate full_database.py with the new names:
-> python src/python/fulldbfile.py

Then the scripts
-> python src/python/labelisation.py

You simply have to copy paste that to continue the work: 

-> mv Caffe_Files/full_database.txt Caffe_Files/full_database_old.txt
-> mv Caffe_Files/labelised_full_database.txt Caffe_Files/full_database.txt

—————————————————————————

Generate Train and Validate caffe files : chmod +x trainandval.sh;  ./trainandval.sh [number_of_files]

-> number_of_files is an option. If it is set to 1, then only a train.txt file will be generated as a copy of full_database.txt. If it is set to 2, then train.txt and test.txt will be generated. These two files will contain the same number of lines, i.e. the same number of files (plus or minus one). Finally, if it is set to 3, it will contain train.txt, test.txt, and valid.txt. The three files will have the same size.


FOR SIAMESE NETWORK ONLY:
—————————————————————————
Files generation from train.txt and test.txt. For this usage, you should have done “./trainandval.sh 2” previously.
-> python src/python/create_siamese_db.py : It will create the train1.txt, train2.txt, test1.txt and test2.txt files required by the siamese network.

-> Then :
for name in Database/*/*.jpg; do
convert -resize 256x256\! $name $name
done

The goal is to resize the images of the database. Modify the path “Database/*/*.jpg” if necessary.

-> ./src/siamese/train_siamese_mbk.sh for training
-> python src/siamese/analyse.py for testing
—————————————————————————

FOR DEEPFACE NETWORK:

First, modify the database with this script for preprocessing:
-> python src/python/preprocessing_face_id.py

—————————————————————

TO TEST THE NETWORK:
———————————————————-

We only use the full_db.txt file.
First we generate the pairs readable by matlab with:
-> python src/python/pairs_generator.py

To generate the file src/face_id/face_verification_experiment-master/code/mbk_pairs.mat

Then:

-> python src/face_id/caffe_ftr.py src/face_id/face_verification_experiment-master/proto/LightenedCNN_A_deploy.prototxt src/face_id/face_verification_experiment-master/model/LightenedCNN_A.caffemodel . Caffe_Files/full_database.txt prob src/face_id/face_verification_experiment-master/results/mbk_result_CNN_AA.mat

To generate the file src/face_id/face_verification_experiment-master/results/mbk_result_CNN_A.mat


-> In matlab, launch face_verification_experiment-master/code/evaluation.m to evaluate the work.

TO USE THE SCRIPT:
——————————————————
In src/software:
-> Copy the images of the criminal you want to find in the video in criminal_pictures/
-> Copy the video you want to find the criminal in in video/
-> python script.py

The detected faces will be saved in detected/

Other scripts:
——————————————

src/python/5pt_preprocess.py does not work properly. Initially it was meant to generate the preprocessing files required for face_id to be used. Unhappily, the github page was in my opinion not documented enough and I did not have enough time to understand it. So I used an other more simple preprocessing technique, which seems to be working fine.

Creator/Contributor : Paul-Darius Sarmadi <sarmadipauldarius@gmail.com> 2016